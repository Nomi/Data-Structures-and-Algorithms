4, Accepted
{
    "language": "csharp",
    "code": "public class Solution {\n    public bool Exist(char[][] board, string word) {\n        //DID IT ALL ON MY OWN, LET'S GOOOO!!!\n        return backtrack1Wrapper(board, word);\n    }\n\n    public bool backtrack1Wrapper(char[][] board, string word)\n    {\n        for(int i=0;i<board.Length;i++)\n        {\n            for(int j=0; j<board[i].Length;j++)\n            {\n                if(word[0]==board[i][j] && backtrack1(board, word, 0, i, j))\n                    return true;\n            }\n        }\n        return false;\n    }\n    public bool backtrack1(char[][]board, string word, int idx, int x, int y)\n    {\n        if(idx==word.Length)\n            return true;\n        if(x==-1||y==-1||x==board.Length||y==board[x].Length||word[idx]!=board[x][y])\n            return false;\n        \n        char curr = board[x][y];\n        board[x][y] = '*'; //COULD'VE USED A SET OF TUPLES IF MODIFYING ARRAY WAS NOT ALLOWED OR THERE WAS NO UNALLOWED CHARACTER.\n\n        bool isFound = \n            backtrack1(board, word, idx+1, x+1, y) ||\n            backtrack1(board, word, idx+1, x-1, y) ||\n            backtrack1(board, word, idx+1, x, y+1) ||\n            backtrack1(board, word, idx+1, x, y-1);\n\n        board[x][y] = curr;\n\n        return isFound;\n    }\n}\n",
    "problemId": "search-for-word",
    "statusDescription": "Accepted",
    "time": "0.536",
    "date": "2024-11-05T02:55:57.508Z",
    "memory": 54152,
    "stdout": "",
    "stderr": ""
}