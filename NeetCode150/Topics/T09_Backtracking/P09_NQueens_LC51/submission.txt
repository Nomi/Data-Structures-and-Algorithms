2, Accepted
{
    "language": "csharp",
    "code": "public class Solution {\n    public List<List<string>> SolveNQueens(int n) { \n        //IMPORTANT!!! : WATCH NEETCODE VIDEO AND CHECK MY 1ST ATTEMPT (WaysToPlaceNQueens, recBacktrackHelper)!!\n        //I also had to check the solution a little before writing this and I checked for a little help many times, but it is still not hard!\n        return WaysToPlaceNQueens(n);\n    }\n\n    public const char Queen = 'Q';\n    public const char EmptyPlace = '.';\n\n    private static char[] GetEmptyRow(int n) => new string(EmptyPlace, n).ToCharArray();\n\n    public List<List<string>> WaysToPlaceNQueens(int n)\n    {\n        List<List<string>> res = new();\n\n        recBacktrackHelper(\n            row: 0,\n            n: n,\n            usedCols: new(n),\n            usedPositiveDiag: new(),\n            usedNegativeDiag: new(),\n            curState: new(),\n            res: res\n        );\n\n        return res;\n    }\n\n    public void recBacktrackHelper(int row, int n, HashSet<int> usedCols, HashSet<int> usedPositiveDiag, HashSet<int> usedNegativeDiag, List<string> curState, List<List<string>> res)\n    {\n        //NOTE: We don't need to check if the row has been used before because we will start from 0th row and then \n        // place each queen on the next row. (we don't need to care about placing same queen on other rows because \n        // the queens are INDISTINGUISHABLE from each other).\n        //Also clearly not possible to skip a row or column because n queens and n rows and n columns.\n        if(row==n)\n        {\n            res.Add(new(curState)); //new creates A COPY of the list.\n            return;\n        }\n\n        var curRow = GetEmptyRow(n);\n        \n        for(int col=0; col<n; col++)\n        {\n            if(usedCols.Contains(col))\n                continue;\n            //for each element on A positive diagonal (bottom-left to top-right), \n            //the following remains constant on THAT positive diagonal (check neetcode video illustration)\n            int posDiag = row+col;\n\n            //for each element on A negative diagonal(top-left to bottom-right),\n            // the following remains constant on THAT negative diagonal (check neetcode video illustration)\n            int negDiag = col-row; //row-col; //or col-row, same thing.\n\n            if(usedPositiveDiag.Contains(posDiag)||usedNegativeDiag.Contains(negDiag))\n            {\n                continue;\n            }\n\n            usedCols.Add(col);\n            usedPositiveDiag.Add(posDiag);\n            usedNegativeDiag.Add(negDiag);\n\n            curRow[col] = Queen; // == 'Q'\n            curState.Add(new string(curRow));\n\n            recBacktrackHelper(row+1, n, usedCols, usedPositiveDiag, usedNegativeDiag, curState, res);\n\n            curState.RemoveAt(curState.Count-1);\n            curRow[col] = EmptyPlace;\n\n            usedNegativeDiag.Remove(negDiag);\n            usedPositiveDiag.Remove(posDiag);\n            usedCols.Remove(col);\n        }\n    }\n}",
    "problemId": "n-queens",
    "statusDescription": "Accepted",
    "time": "0.42",
    "date": "2024-11-14T22:43:46.378Z",
    "memory": 58312,
    "stdout": "",
    "stderr": ""
}