4, Accepted
{
    "date": "2024-09-16T19:53:45.618Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        return attempt1(s,t);\n    }\n\n    public string attempt1(string s, string t)\n    {\n        // if(s.Length==0||t.Length==0||s.Length<t.Length)\n        // {\n        //     return \"\";\n        // }\n\n        var tfreq = new Dictionary<char,int>();\n        foreach(char c in t)\n        {\n            tfreq.TryAdd(c,0);\n            tfreq[c]++;\n        }\n        int need = tfreq.Keys.Count();\n        int have = 0;\n        int minStrL = 0, minStrR = int.MaxValue;\n        int l=0;\n        var sfreq = new Dictionary<char,int>();\n        for(int r=0;r<s.Length;r++)\n        {\n            sfreq.TryAdd(s[r],0);\n            sfreq[s[r]]++;\n            if(tfreq.ContainsKey(s[r])&&sfreq[s[r]]==tfreq[s[r]])\n                have++;\n            if(have==need)\n            {\n                while(l<=r&&(!tfreq.ContainsKey(s[l])||sfreq[s[l]]>tfreq[s[l]]))\n                {\n                    if(--sfreq[s[l]]==0)\n                        sfreq.Remove(s[l]);\n                    l++;\n                }\n                if(minStrR-minStrL>r-l)\n                {\n                    minStrR=r;\n                    minStrL=l;\n                }\n                //Move l to start looking for next matching window.\n                if(--sfreq[s[l]]==0)\n                        sfreq.Remove(s[l]);\n                have--; //because we discareded left even if it was in t as long as s still had == the number of that elements as in t, without keeping any more from the left.\n                l++;\n            }\n        }\n        if(minStrR-minStrL+1<0)\n            return \"\";\n        return s.Substring(minStrL, minStrR-minStrL+1);\n    }\n}\n",
    "memory": 53104,
    "stdout": "",
    "language": "csharp",
    "time": "0.745",
    "problemId": "minimum-window-with-characters",
    "stderr": ""
}