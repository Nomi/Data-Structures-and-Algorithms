6, Compilation Error
{
    "date": "2024-09-15T21:11:53.595Z",
    "statusDescription": "Compilation Error",
    "code": "public class Solution {\n    //# Sliding Window:\n    //      TC: O(N)\n    //      SC: O(N) (or O(k) where k is the length of longest substring, which is <=N and as such this is asymptotically bounded by O(N))\n    public int LengthOfLongestSubstring(string s) {\n        ///READ COMMENTS FROM THIS FOR TIPS IN GENERAL \n        ///WITH WHILE LOOPS AND SLIDING WINDOW/TWO POINTERS!:\n        // return attempt1(s);\n\n        //USE FOR MAIN REFERENCE:\n        return NeetCodeProvidedSoln(s);\n\n\n        //PRACTICE ATTEMPTS:\n        //return attempt2(string s);\n    }\n\n    public int attempt1(string s)\n    {\n        if(s.Length<2)\n            return s.Length;\n        HashSet<char> hs = new();\n        int l=0;int r=1;\n        hs.Add(s[l]);\n        int maxLength=1;\n        while(r<s.Length)\n        {\n            // THIS WAS HERE EARLIER BUT THAT'S DUMB AND BAD\n            // because it only updates max if there's a duplicate\n            // which won't trigger if the string reaches the end \n            // for the last substring.\n            // maxLength=(int)Math.Max(r-l+1, maxLength);\n            if(hs.Contains(s[r]))\n            {\n                while(hs.Contains(s[r]))\n                {\n                    hs.Remove(s[l]);\n                    l++;\n                }\n                if(l==r)\n                {\n                    hs.Add(s[l]);\n                    r++;\n                    continue;\n                }\n            }\n            hs.Add(s[r]);\n            \n            //THIS NEEDS TO BE HERE AND NOT ABOVE (like I had it earlier)\n            //AS EXPLAINED ABOVE!\n            maxLength=(int)Math.Max(r-l+1, maxLength);\n            r++;\n        }\n        return maxLength;\n    }\n\n    public int NeetCodeProvidedSoln(string s)\n    {\n                HashSet<char> charSet = new HashSet<char>();\n        int l = 0;\n        int res = 0;\n\n        for (int r = 0; r < s.Length; r++) {\n            while (charSet.Contains(s[r])) {\n                charSet.Remove(s[l]);\n                l++;\n            }\n            charSet.Add(s[r]);\n            res = Math.Max(res, r - l + 1);\n        }\n        return res;\n    }\n\n    public int attempt1(string s)\n    {\n\n    }\n}\n",
    "memory": "",
    "stdout": "",
    "language": "csharp",
    "time": "0.0",
    "problemId": "longest-substring-without-duplicates",
    "stderr": ""
}