3, Accepted
{
    "date": "2024-09-21T19:23:31.442Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    public int MinEatingSpeed(int[] piles, int h) {\n        //WATCH EDGE CASES FROM NEETCODE VIDEO\n        return attempt1(piles, h);\n    }\n    const int MAX_BANANAS_IN_PILE = 1000000000;\n    public int attempt1(int[] piles, int h)\n    {\n        //EDGE CASE: MORE PILES THAN HOURS => IMPOSSIBLE TO FINISH! //Only figured it out when watching NeetCode video.\n        if(piles.Length>h)\n            return -1;\n\n        int l = 1; //min you'd need to eat 1 banana per hour (UNLESS BANANAS IN ALL PILES CAN BE 0, WHICH CONSTRAINTS SPECIFY THEY CANNOT!)\n        int r = MAX_BANANAS_IN_PILE; //[ASSUMING] WE EAT AT MOST MAX_BANANAS_IN_PILE\n        //Could also set r = maxmum pile banana count (and it might lead to faster search for smaller piles because complexity would become O(n)+O(n*log(n)) which is asymptotically bounded by O(n*log(n)))\n        \n        int minIntEatingRate = MAX_BANANAS_IN_PILE;\n        while(l<=r) //COMPLEXITY: O(log(MAX_BANANAS_IN_PILE)*n) where n = length of piles which is <= number of hours. It is also technically partially a constant so we get O(n), but this O(n) MIGHT be worse than using max(pile) for small piles.\n        {\n            int midEatingRate = l + (r-l)/2;\n            var numHoursEatingBananas = 0;\n            for(int i=0;i<piles.Length;i++)\n            {\n                // if(midEatingRate<=2)\n                // {\n                //     Console.WriteLine($\"l:{l}, r:{r}, midEatingRate: {midEatingRate}\");\n                // }\n                numHoursEatingBananas += (int)Math.Ceiling((double)piles[i]/midEatingRate);\n            }\n            if(numHoursEatingBananas>h)\n                l = midEatingRate+1;\n            else if (numHoursEatingBananas<=h)\n            {\n                r = midEatingRate-1;\n                // minIntEatingRate = (int) Math.Min(midEatingRate, minIntEatingRate)\n                //Due to how binary search works, we don't need Math.Min\n                minIntEatingRate = midEatingRate;\n            }\n        }\n        if(minIntEatingRate == MAX_BANANAS_IN_PILE)\n            return -1;\n        return minIntEatingRate;\n    }\n}\n",
    "memory": 53192,
    "stdout": "",
    "language": "csharp",
    "time": "0.76",
    "problemId": "eating-bananas",
    "stderr": ""
}