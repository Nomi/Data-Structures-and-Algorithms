2, Accepted
{
    "date": "2024-09-22T16:32:14.341Z",
    "statusDescription": "Accepted",
    "code": "public class TimeMap {\n    Dictionary<string, List<(string val, int ts)>> map;\n    public TimeMap() {\n        map = new();\n    }\n    \n    public void Set(string key, string value, int timestamp) {\n        map.TryAdd(key, new());\n        map[key].Add((value, timestamp));\n    }\n    \n    public string Get(string key, int timestamp) {\n        if(!map.ContainsKey(key)) //EDGE CASE I ONLY FIGURED OUT BECAUSE OF CODE PROVIDED ON NC.io\n            return \"\";\n        var list = map[key];\n        int l = 0, r = list.Count-1;\n        string res = \"\";\n        while(l<=r)\n        {\n            int m = (l+r)/2;\n            Console.WriteLine(list[m]);\n            var (mVal, mTs) = list[m];\n            if(mTs>timestamp)\n                r = m-1;\n            else if (mTs<=timestamp)\n            {\n                res = mVal; \n                l = m+1;\n                //[IMPORTANT NOTE]\n                //we don't need Math.Max because any further \n                //ones matching this condition will be the \n                //most recent because we increase l.\n\n                //e.g. considering only timestamps: [0,1,2,4,6] \n                //At timestamp 5 as input, we use bs:\n                //first check mid at m=2, which is 2 and 2<=5\n                //so either it is the newest timestamp that we can consider\n                //or there's one or more after it <=5. We don't consider anything to its left including itself (by setting left to mid+1) because we already know there's one <=5 that's newer than those (as for 2 itself, we already set it as the newest and it won't change unless we find a newer timestamp <=5)\n                //Then m=3, which is 4, and just like above, we set timestamp to this because it is newer than all those considered before it (by definition).\n                //Then m = 4, which is 6, but 6 is > 5, so we don't consider and move r to mid-1.\n            }\n        }\n        return res;\n    }\n}\n",
    "memory": 53488,
    "stdout": "",
    "language": "csharp",
    "time": "0.737",
    "problemId": "time-based-key-value-store",
    "stderr": ""
}