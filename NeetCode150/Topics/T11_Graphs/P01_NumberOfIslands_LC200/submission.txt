4, Accepted
{
    "language": "csharp",
    "code": "public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n        // return dfs1Wrapper(grid);\n        return bfs1_MarkIslandVisited(grid);\n        \n    }\n\n    ////////// DFS:\n    public int dfs1Wrapper(char[][] grid)\n    {\n        //TC: O(ROWS*COLUMNS) SC: O(ROWS*COLUMNS)\n        int numIslands = 0;\n        for(int r = 0; r < grid.Length; r++)\n        {\n            for(int c = 0; c< grid[0].Length; c++)\n            {\n                if(grid[r][c] == '1')\n                {\n                    numIslands += 1;\n                    dfs1_MarkIslandVisited(grid, r, c);\n                }\n            }\n        }\n        return numIslands;\n    }\n    char visited = '*'; //if not allowed to overwrite input array, we could use a seen (HashSet of tuples r,c),\n    public void dfs1_MarkIslandVisited(char[][] grid, int r, int c) //marks connected parts of islands as visited.\n    {\n        if(r<0 || r>= grid.Length || c<0 || c>=grid[r].Length || grid[r][c] != '1')\n            return;\n        \n        grid[r][c]=visited;\n\n        dfs1_MarkIslandVisited(grid, r+1, c); //down\n        dfs1_MarkIslandVisited(grid, r-1, c); //up\n        dfs1_MarkIslandVisited(grid, r, c+1); //right\n        dfs1_MarkIslandVisited(grid, r, c-1); //left\n        return;\n    }\n\n\n    ////////// BFS (WITHOUT overwriting input array)\n    HashSet<(int r, int c)> seen;\n    public int bfs1_MarkIslandVisited(char[][] grid) //marks connected parts of islands as visited.\n    {\n        int numIslands = 0;\n        seen = new();\n        for(int r=0; r<grid.Length;r++)\n        {\n            for(int c=0; c<grid[0].Length;c++)\n            {\n                (int r, int c) rc = (r,c);\n                // Console.WriteLine(seen.Contains(rc));\n                if(grid[rc.r][rc.c]=='1' && !seen.Contains(rc))\n                {\n                    // Console.WriteLine(seen.Count);\n                    numIslands++;\n                    bfs1_Helper(grid, rc);\n                }\n            }\n        }\n        return numIslands;\n    }\n\n    public void bfs1_Helper(char[][] grid, (int r, int c) _rc)\n    {\n        Queue<(int r, int c)> q = new();\n        q.Enqueue(_rc);\n        while(q.Count>0)\n        {\n            var rc = q.Dequeue();\n            if(rc.r<0 || rc.r>= grid.Length || rc.c<0 || rc.c>=grid[rc.r].Length || grid[rc.r][rc.c] != '1' || seen.Contains(rc))\n                continue;\n            (int r, int c) = rc;\n            // Console.WriteLine($\"{_rc.r},{_rc.c} : {r},{c}\");\n            seen.Add((r, c));\n            q.Enqueue((r-1, c));\n            q.Enqueue((r+1, c));\n            q.Enqueue((r, c-1));\n            q.Enqueue((r, c+1));\n        }\n    }\n}\n",
    "problemId": "count-number-of-islands",
    "statusDescription": "Accepted",
    "time": "0.421",
    "date": "2024-11-19T23:32:41.636Z",
    "memory": 56244,
    "stdout": "",
    "stderr": ""
}