1, Wrong Answer
{
    "language": "csharp",
    "code": "public class Solution {\n    public List<string> FindWords(char[][] board, string[] words) {\n        return Attempt1.FindWords(board, words);\n    }\n}\n\n\npublic static class Attempt1\n{\n    private class TrieNode\n    {\n        public Dictionary<char, TrieNode> children = new(26);\n        public bool isWord = false;\n    }\n\n\tstatic char visited = '*';\n\tstatic TrieNode root;\n    static int maxWordLen;\n\t\n    public static List<string> FindWords(char[][] board, string[] words) {\n        root = new TrieNode();\n        maxWordLen = 0;\n        \n        foreach(var word in words)\n        {\n            AddWord(word, root);\n        }\n\n        List<string> res = new();\n        List<char> wordSoFar = new(maxWordLen);\n\n        for(int r=0; r<board.Length;r++)\n        {\n            for(int c=0; c<board[0].Length;c++)\n            {\n                dfs(board, r, c, root, wordSoFar, res);\n            }\n        }\n\n        return res;\n    }\n\n    private static void dfs(char[][] board, int r, int c, TrieNode prevNode, List<char> wordSoFar, List<string> res)\n    {\n        Console.WriteLine($\"r:{r} / {board.Length-1}, c:{c} / {board[0].Length-1}\");\n\n        if(r<0||r>=board.Length||c<0||c>=board[0].Length||board[r][c]==visited||wordSoFar.Count==maxWordLen) //im dumb cuz I spend so long debugging just to realize I was using r > length and c > length instead of >= !!!\n            return;\n\n        if(!prevNode.children.ContainsKey(board[r][c]))\n            return;\n\n        Console.WriteLine($\"--> {board[r][c]}, {wordSoFar.Count} / {maxWordLen}         {string.Concat(wordSoFar)}\");\n        \n        var curChar = board[r][c];\n        board[r][c] = visited;\n        wordSoFar.Add(curChar);\n\n        var curNode = prevNode.children[curChar];\n        if(curNode.isWord) Console.WriteLine($\"-----------------------------{string.Concat(wordSoFar)}\");\n        if(curNode.isWord) res.Add(string.Concat(wordSoFar));\n\n        dfs(board, r-1, c, root, wordSoFar, res);\n        dfs(board, r+1, c, root, wordSoFar, res);\n        dfs(board, r, c-1, root, wordSoFar, res);\n        dfs(board, r, c+1, root, wordSoFar, res);\n\n        wordSoFar.RemoveAt(wordSoFar.Count-1);\n        board[r][c] = curChar;\n    }\n\n\n    private static void AddWord(string word, TrieNode root)\n    {\n        if(maxWordLen < word.Length) maxWordLen = word.Length;\n\n        var parent = root;\n\n        foreach(char c in word)\n        {\n            parent.children.TryAdd(c, new TrieNode());\n            parent = parent.children[c];\n        }\n\n        parent.isWord = true;\n    }\n}\n",
    "problemId": "search-for-word-ii",
    "statusDescription": "Wrong Answer",
    "time": "0.41",
    "date": "2024-11-19T01:43:09.802Z",
    "memory": 58120,
    "stdout": "",
    "stderr": ""
}