3, Accepted
{
    "language": "csharp",
    "code": "public class PrefixTree {\n    IPrefixTree soln;\n    public PrefixTree() {\n        //WATCH THE HACKERRANK VIDEO ABOUT TRIE FROM THE LADY WHO WROTE CRACKING THE CODING INTERVIEW.\n        \n        //Dictionary/HashMap would've been less verbose, thus easier to implement, while Array is faster in performance.\n\n        soln = new Attempt1();\n    }\n    \n    public void Insert(string word) {\n        soln.Insert(word);\n    }\n    \n    public bool Search(string word) {\n        return soln.Search(word);\n    }\n    \n    public bool StartsWith(string prefix) {\n        return soln.StartsWith(prefix);\n    }\n}\n\npublic interface IPrefixTree\n{\n    public void Insert(string word);\n    \n    public bool Search(string word);\n    \n    public bool StartsWith(string prefix);\n}\n\npublic class Attempt1 : IPrefixTree\n{\n    private class TrieNode\n    {\n        // public string currChar;\n        public TrieNode[] children = new TrieNode[26]; //could've used `Node[] children = new[26];` and it would have been faster and more time efficient. \n        public bool canBeEndOfWord = false;\n    }\n    \n    TrieNode trieRoot;\n    \n    public Attempt1()\n    {\n        trieRoot = new();\n    }\n    \n    public void Insert(string word) {\n\n        var parent = trieRoot;\n\n        for(int i=0;i<word.Length;i++)\n        {\n            // parent.children.TryAdd(curSubStr, new TrieNode());\n            int targetChildIdx = word[i] - 'a';\n            parent.children[targetChildIdx] ??= new TrieNode();\n            parent = parent.children[targetChildIdx];\n        }\n\n        parent.canBeEndOfWord = true;\n    }\n    \n    public bool Search(string word) {\n\n        var parent = trieRoot;\n\n        for(int i=0;i<word.Length;i++)\n        {\n            int targetChildIdx = word[i] - 'a';\n            // if(parent.ContainsKey(word[i]) is false)\n            //     return false;\n            if(parent.children[targetChildIdx] is null)\n                return false;\n            parent = parent.children[targetChildIdx];\n        }\n\n        return parent.canBeEndOfWord;\n    }\n    \n    public bool StartsWith(string prefix) {\n        var parent = trieRoot;\n\n        for(int i=0;i<prefix.Length;i++)\n        {\n            int targetChildIdx = prefix[i] - 'a';\n            // if(parent.children.ContainsKey(word[i]) is false)\n            //     return false;\n            if(parent.children[targetChildIdx] is null)\n                return false;\n            parent = parent.children[targetChildIdx];\n        }\n\n        return true;\n    }\n}",
    "problemId": "implement-prefix-tree",
    "statusDescription": "Accepted",
    "time": "0.428",
    "date": "2024-11-18T23:01:25.486Z",
    "memory": 56264,
    "stdout": "",
    "stderr": ""
}