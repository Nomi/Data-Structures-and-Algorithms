2, Accepted
{
    "date": "2024-09-15T19:59:26.043Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    //## TWO POINTER APPROACH:\n    //# TC = O(N)\n    //# SC = O(1)\n    public int Trap(int[] height) {\n        // return attempt1(height); //PREFER LOOP STYLE FROM HERE!\n\n        return attempt2(height); //USE ATTEMPT1 LOOP STILE RATHER THAN THIS!!\n    }\n\n    //## TWO POINTER APPROACH:\n    //# TC = O(N)\n    //# SC = O(1)\n    public int attempt1(int[] height)\n    {\n        if(height==null||height.Count()==0)\n            return 0;\n\n        // // NeetCode Video Assisted:\n        int water = 0;\n        int l=0, r=height.Count()-1;\n        int lMax=height[l], rMax = height[r];\n        while(l<r)\n        {\n            if(lMax<rMax)\n            {\n                l++;\n                lMax= (int) Math.Max(lMax,height[l]);\n                water += lMax-height[l]; //never negative because of the statement directly above!\n            }\n            else\n            {\n                r--;\n                rMax= (int) Math.Max(rMax,height[r]);\n                water += rMax-height[r]; //never negative because of the statement directly above!\n            }\n        }\n        return water;\n\n\n        ////My old attempt:\n        // for(int l=1;l<-2-1+height.Count();l++)\n        // {\n        //     int r=l+1;\n        //     // if(height[l]<height[r])\n        //     //     continue;\n        //     while(r+1<height.Count()&&height[r]<height[r+1])\n        //         height++;\n        //     int minHeight\n        // }\n    }\n\n    public int attempt2(int[] height)\n    {\n        if(height==null||height.Count()==0)\n            return 0;\n        \n        int l = 0, r = height.Count()-1;\n        int lMax = 0, rMax = 0;\n        int water=0;\n        while(l<=r) //the way I have written this, it wouldn't work with l<r\n        {\n            //it doesn't work with l<r because we would not\n            //calculate the water on the middle block (for odd numbered blocks).\n            Console.Write($\"{l},{r} : {lMax},{rMax} :\");\n            if(lMax<rMax)\n            {\n                int temp = (int)Math.Min(lMax,rMax)-height[l];\n                if(temp>0) //The current bar is not higher than water level (i.e. not negative ot zero)\n                    water+=temp;\n                lMax = (int)Math.Max(lMax,height[l]);\n                l++;\n                Console.WriteLine($\"l - {temp} : total_water - {water}\");\n            }\n            else\n            {\n                int temp = (int)Math.Min(lMax,rMax)-height[r];\n                if(temp>0) //The current bar is not higher than water level (i.e. not negative ot zero)\n                    water+=temp;\n                rMax = (int)Math.Max(rMax,height[r]);\n                r--;\n                Console.WriteLine($\"r - {temp} : total_water - {water}\");\n            }\n        }\n        return water;\n    }\n\n}\n",
    "memory": 52892,
    "stdout": "",
    "language": "csharp",
    "time": "0.707",
    "problemId": "trapping-rain-water",
    "stderr": ""
}