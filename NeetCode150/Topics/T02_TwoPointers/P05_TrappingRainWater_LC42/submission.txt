1, Accepted
{
    "date": "2024-09-15T01:00:30.751Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    //## TWO POINTER APPROACH:\n    //# TC = O(N)\n    //# SC = O(1)\n    public int Trap(int[] height) {\n        return attempt1(height);\n    }\n\n    //## TWO POINTER APPROACH:\n    //# TC = O(N)\n    //# SC = O(1)\n    public int attempt1(int[] height)\n    {\n        if(height==null||height.Count()==0)\n            return 0;\n\n        // // NeetCode Video Assisted:\n        int water = 0;\n        int l=0, r=height.Count()-1;\n        int lMax=height[l], rMax = height[r];\n        while(l<r)\n        {\n            if(lMax<rMax)\n            {\n                l++;\n                lMax= (int) Math.Max(lMax,height[l]);\n                water += lMax-height[l]; //never negative because of the statement directly above!\n            }\n            else\n            {\n                r--;\n                rMax= (int) Math.Max(rMax,height[r]);\n                water += rMax-height[r]; //never negative because of the statement directly above!\n            }\n        }\n        return water;\n\n\n        ////My old attempt:\n        // for(int l=1;l<-2-1+height.Count();l++)\n        // {\n        //     int r=l+1;\n        //     // if(height[l]<height[r])\n        //     //     continue;\n        //     while(r+1<height.Count()&&height[r]<height[r+1])\n        //         height++;\n        //     int minHeight\n        // }\n    }\n}\n",
    "memory": 54376,
    "stdout": "",
    "language": "csharp",
    "time": "0.668",
    "problemId": "trapping-rain-water",
    "stderr": ""
}