11, Accepted
{
    "date": "2024-09-14T17:51:09.892Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    //This encoding is interesting! (also, use while loops like they did?)\n\n    public string Encode(IList<string> strs) {\n        // return enc1(strs);\n        return enc2(strs);\n    }\n\n    public List<string> Decode(string s) {\n        // return dec1(s);\n        return dec2(s);\n    }\n\n/////////////////////////--ATTEMPT_1--//////////////////////////////////\n    // public string enc1(IList<string> strs)\n    // {\n    //     StringBuilder res = new();\n\n    //     foreach(var s in strs)\n    //     {\n    //         res.Append($\"{s.Length}#{s}\");\n    //     }\n    //     return res.ToString();\n    // }\n\n    // public string dec1(IList<string> strs)\n    // {\n    //     if(s.Length<2)\n    //         return new();\n    //     List<string> res = new();\n    //     int numStart = -1;\n    //     int shrp = -1;\n    //     for(int i=0;i< s.Length;i++) //s.Substring has a complexity of O(N) WHERE N is length of the substr???\n    //     {\n    //         if(numStart==-1&&char.IsNumber(s[i]))\n    //             numStart = i;\n    //         else if(s[i]=='#'&&numStart!=-1)\n    //             shrp = i;\n    //         if(shrp==-1)\n    //             continue;\n    //         // int wLen;\n    //         int.TryParse(s.Substring(numStart, shrp-numStart),out var wLen); //shrp-numStart gives the length from first digit of num to the last digit \n    //         i=shrp+wLen;\n    //         res.Add(s.Substring(shrp+1,wLen));\n    //         numStart=-1;\n    //         shrp=-1;\n    //     }\n    //     return res;\n    // }\n\n/////////////////////////--ATTEMPT_2--//////////////////////////////////\n    public string enc2(IList<string> strs) {\n        StringBuilder res = new();\n        foreach(var str in strs)\n        {\n            res.Append($\"{str.Length}#{str}\");\n        }\n        return res.ToString();\n    }\n\n    public List<string> dec2(string s) {\n        List<string> res = new();\n        for(int i=0; i<s.Length;)\n        {\n            // if(!s[i].IsDigit)\n            //     throw new Exception(\"Encoded string is invalid.\");\n            int numLen=1;\n            while(s[i+numLen]!='#')\n                numLen++;\n            int wordLen = int.Parse(s.Substring(i,numLen));\n            i+=1+numLen; //we add 1 to skip the # right after the number.\n            res.Add(s.Substring(i,wordLen));\n            i+=wordLen;\n        }\n        return res;\n    }\n\n/////////////////////////--ATTEMPT_--//////////////////////////////////\n}\n",
    "memory": 54432,
    "stdout": "",
    "language": "csharp",
    "time": "0.725",
    "problemId": "string-encode-and-decode",
    "stderr": ""
}