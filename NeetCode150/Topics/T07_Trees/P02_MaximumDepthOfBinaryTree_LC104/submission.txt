5, Accepted
{
    "date": "2024-10-01T23:08:29.281Z",
    "statusDescription": "Accepted",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\npublic class Solution {\n    public int MaxDepth(TreeNode root) {\n        return recDfs1(root); //Best solution?\n        // return itrBfs1(root);\n        // return itrDfs1(root); //Look at how the stack is used (and depth is stored in too, as a tuple!)\n    }\n\n    public int recDfs1(TreeNode root) //Best solution?\n    {\n        if(root == null)\n            return 0;\n        return (int) Math.Max(1+recDfs1(root.left), 1+recDfs1(root.right));\n    }\n\n    public int itrBfs1(TreeNode root) \n    {\n        if(root==null)\n            return 0;\n        Queue<TreeNode> q = new();\n        q.Enqueue(root);\n        int maxDepth = 0;\n\n        while(q.Count>0)\n        {\n            maxDepth++;\n            var countAtThisDepth = q.Count;\n            for(int i=0;i<countAtThisDepth;i++)\n            {\n                var cur = q.Dequeue();\n                if(cur.left!=null)\n                    q.Enqueue(cur.left);\n                if(cur.right!=null)\n                    q.Enqueue(cur.right);\n            }\n        }\n        return maxDepth;\n    }\n\n    public int itrDfs1(TreeNode root) //Used a little help from neetcode io solution!!\n    {\n        Stack<(TreeNode node, int depth)> stk = new();\n        int maxDepth = 0;\n        stk.Push((root, 1));\n        while(stk.Count>0)\n        {\n            var cur = stk.Pop();\n            var node = cur.node;\n            if(node==null)\n                continue;\n            var depth = cur.depth;\n            if(maxDepth<depth)\n                maxDepth = depth;\n            stk.Push((node.right, 1+depth));\n            stk.Push((node.left, 1+depth));\n        }\n        return maxDepth;\n    }\n}\n",
    "memory": 53740,
    "stdout": "",
    "language": "csharp",
    "time": "0.707",
    "problemId": "depth-of-binary-tree",
    "stderr": ""
}