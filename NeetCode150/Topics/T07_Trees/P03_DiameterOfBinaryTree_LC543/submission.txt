1, Accepted
{
    "date": "2024-10-03T19:37:52.995Z",
    "statusDescription": "Accepted",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\npublic class Solution {\n    public int DiameterOfBinaryTree(TreeNode root) {\n        return attempt1.rec1(root);\n    }\n}\n\npublic static class attempt1\n{\n    static int max;\n\n    public static int rec1(TreeNode root)\n    {\n        max = 0;\n        rec1Helper(root);\n        return max;\n    }\n\n    static int rec1Helper(TreeNode root)\n    {\n        if(root==null)\n            return 0;\n        int maxEdgesBelowThisL = rec1Helper(root.left);\n        int maxEdgesBelowThisR = rec1Helper(root.right);\n        int currLocalMaxDiameter = maxEdgesBelowThisL + maxEdgesBelowThisR;\n        // Console.WriteLine($\"{root.val}: {maxEdgesBelowThisL} + {maxEdgesBelowThisR} = {currLocalMaxDiameter} [Global max: {max}]\");\n\n        if(currLocalMaxDiameter>max)\n            max = currLocalMaxDiameter;\n\n        return 1 + (int) Math.Max(maxEdgesBelowThisL, maxEdgesBelowThisR);    \n    }\n}\n",
    "memory": 53416,
    "stdout": "",
    "language": "csharp",
    "time": "0.765",
    "problemId": "binary-tree-diameter",
    "stderr": ""
}