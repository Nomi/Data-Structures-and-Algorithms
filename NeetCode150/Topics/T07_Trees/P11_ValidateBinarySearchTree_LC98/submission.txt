2, Accepted
{
    "date": "2024-10-08T21:05:13.512Z",
    "statusDescription": "Accepted",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n        //EASY BUT TRICKY (Important: read comments on the `rec1Dfs` function.)\n        //COULDN'T COME UP WITH MY OWN SOLUTION AND HAND TO WATCH THE FIRST ~5 MINUTES OF Greg Hogg's VIDEO ABOUT IT TO COME UP WITH THE CODE (the basic idea was from the video itself, obviously)\n        return rec1Dfs(root, int.MinValue, int.MaxValue); // Given the constraints, could've also done: -1001, 1001);\n    }\n\n    //TC: O(N)\n    //SC: O(N) [worst case, best case log2(n)]\n    public bool rec1Dfs(TreeNode root, int min, int max) //Clearly in-order is more efficient because it ends quickly.\n    {\n        //Base case:\n        if(root==null)\n            return true;\n\n        //The exclusive range (min, max) is such that: \n        //- `min` is the value of the most recent node from which the direction of our traversal was to the right (meaning all elements\n        //from the subtree starting at that right child had to be bigger than that).\n        //- `max` is the value we have seen at the most recent node from which we travel left (meaning all elements of the subtree starting\n        //at the left child are smaller than that).\n        bool isCurNodeValid = (min < root.val) && (root.val < max); //min and max are exclusive because of how it's implemented.\n\n        return isCurNodeValid &&  \n            rec1Dfs(root.left, min, root.val) &&  \n            rec1Dfs(root.right, root.val, max);\n        //For an explanation of how/why this works, either read the comments on isCurNodeValid evaluation or watch Greg Hogg's video.\n    }\n}\n",
    "memory": 54744,
    "stdout": "",
    "language": "csharp",
    "time": "0.738",
    "problemId": "valid-binary-search-tree",
    "stderr": ""
}