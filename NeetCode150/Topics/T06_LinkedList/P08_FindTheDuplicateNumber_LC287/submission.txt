2, Accepted
{
    "date": "2024-09-28T23:59:51.692Z",
    "statusDescription": "Accepted",
    "code": "public class Solution {\n    public int FindDuplicate(int[] nums) {\n        //[IMPORTANT] WATCH NEETCODE VIDEO FOR THIS !!!!!\n        return attempt1(nums);   \n    }\n\n    public int attempt1(int[] nums)\n    {\n        //NOTE: I'm only addding light comments. Watch Neetcode video for full explanation..\n        //Clearly, we can treat it like a linked list.\n        //Clearly, the start of a cycle would be one where are two arrows or more arrays to it. \n        //Therefore, the start of the cycle is the duplicate element.\n        //Cuz we treat values in the array as the value of each node,\n        //And the array is treated like a map from the current value (as an indice) to the next element (the value in the array).\n\n\n        //Cycle can't start at 0 because we are guaranteed values are from 1-n, so no element points to 0.\n        int slow = 0;\n        int fast = 0;\n\n        //finding where fast and slow intersect.\n        do\n        {\n            slow = nums[slow]; //next\n            fast = nums[nums[fast]]; //next-next\n        }\n        while(slow!=fast);\n\n\n        //We get another pointer at the beginning (call it slow2) \n        //and we check when this pointer intersects with slow.\n        //That point will be the start of the cycle (there are Mathematical proofs for this).\n        //It is known as Floyd's Tortoise and Hare Cycle detection algorithm. (ALSO USEFUL FOR DETECTING WHERE CYCLES START)\n        var slow2 = 0;\n        while(slow!=slow2)\n        {\n            slow = nums[slow];\n            slow2 = nums[slow2];\n        }\n\n        //\"slow\"/\"slow2\", not \"nums[slow]\"/\"nums[slow2]\",\n        //because slow is the linked list node that is the beginning of the cycle! (the one that's repeating as explained above).\n        //as when nums[slow] == nums[slow2] are the same, it means the we reached the node with more than 1 arrow.\n        //as such, since slow and slow2 store these values from prior iteration, when we get here slow2 == slow == previousnumsatslow/slow2.\n        return slow;\n    }\n}\n",
    "memory": 53236,
    "stdout": "",
    "language": "csharp",
    "time": "0.738",
    "problemId": "find-duplicate-integer",
    "stderr": ""
}