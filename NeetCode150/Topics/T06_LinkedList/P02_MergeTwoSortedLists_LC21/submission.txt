1, Accepted
{
    "date": "2024-09-22T22:06:12.180Z",
    "statusDescription": "Accepted",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n \npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        //ONLY REALLY USEFUL TO REVIEW FOR THE NIFTY TRICKS\n        //IT USES! (marked by the comment \"//NIFTY!\" )\n        return attempt1(list1, list2);\n    }\n\n    public ListNode attempt1(ListNode list1, ListNode list2)\n    {\n        var dummy = new ListNode(-1); //NIFTY!\n        var node = dummy;\n\n        while(list1!=null && list2!=null) //NIFTY! //earlier I had || instead of && and a bunch of if conditions inside the loop! Clearly this is better (check the part after the loop for where we put it when one of them runs out!)\n        {\n            if(list1.val<=list2.val)\n            {\n                node.next = list1;\n                list1=list1.next;\n            }\n            else\n            {\n                node.next = list2;\n                list2=list2.next;\n            }\n            node = node.next;\n        }\n\n        if(list1!=null) //NIFTY!\n            node.next = list1;\n        else //list2 may or may not be null but result will still be fine cuz last element's next should be null anyway.\n            node.next = list2;\n            \n        return dummy.next;\n    }\n}",
    "memory": 53792,
    "stdout": "",
    "language": "csharp",
    "time": "0.759",
    "problemId": "merge-two-sorted-linked-lists",
    "stderr": ""
}