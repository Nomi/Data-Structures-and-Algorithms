3, Accepted
{
    "date": "2024-09-26T00:52:35.058Z",
    "statusDescription": "Accepted",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        return attempt1(l1, l2);\n        //Oher, more conventional ways to calculate the Carry and the value.\n        //Would be helpful if we need multiple digits in same node somehow??? (which doesn't really make sense) \n        // valCurrNode = currSum%10;\n        // carry = currSum/10 (integer division means we get truncate everytime, so 18/10 = 1 and 9/10 = 0)\n    }\n\n    public ListNode attempt1(ListNode l1, ListNode l2)\n    {\n        ListNode dummy = new(-1);\n        var node = dummy;\n        bool isCarry = false;\n        while(l1!=null || l2!=null || isCarry) //IMPORTANT: ALMOST FORGOT ABOUT isCarry NEEDING TO BE HERE!!! BE CAREFUL!!!\n        {\n            // Console.WriteLine(l1?.val); Console.WriteLine(l2?.val); Console.WriteLine(isCarry);\n            int currSum = 0;\n            if(l1!=null)\n                currSum+=l1.val;\n            if(l2!=null)\n                currSum+=l2.val;\n            if(isCarry)\n            {\n                currSum+=1;\n                isCarry = false;\n            }\n            isCarry = (currSum>9); //notice that the biggest that carry can ever be is 1. (because max sum of any two digit is 9+9+1(carry)=19)\n            if(isCarry)\n                currSum -= 10; //notice how this gives us the number we need in the current place (check comment above for information on why)\n            node.next = new(currSum);\n            node = node.next;\n            Console.WriteLine(node.val);\n\n            //Forgot this earlier:\n            l1 = l1?.next; //Need the ?. to concisely handle the case where it might be l1 might be null\n            l2 = l2?.next; //Need the ?. to concisely handle the case where it might be l2 might be null\n        }\n        return dummy.next;\n    }\n}\n",
    "memory": 53828,
    "stdout": "",
    "language": "csharp",
    "time": "0.817",
    "problemId": "add-two-numbers",
    "stderr": ""
}