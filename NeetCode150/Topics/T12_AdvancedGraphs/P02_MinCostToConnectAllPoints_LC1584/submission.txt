6, Compilation Error
{
    "language": "csharp",
    "code": "public class Solution {\n    IMinCostToConnectPointsCalculator soln;\n    public int MinCostConnectPoints(int[][] points) {\n        //Basically shortest path in an undirected AND weighted graph problem, so I'm thinking Djikstra's algorithm (I remember a little bit about it from a video I watched a long time ago)\n        //OKAY, IT MIGHT NOT BE THE CORRECT APPROACH. AT LEAST Neetcodeio solns don't use it.\n        \n        //OKAY, I WAS DUMB, DJIKSTRA IS LOWEST_COST PATH TO A NODE (or all nodes) IN DIRECTED and WEIGHTED GRAPHS \n        //BUT IT DOESN'T ACCOUNT FOR HAVING TO GO THROUGH ALL NODES!!\n        \n        // This problem is ACTUALLY more like finding the Minimum Spanning Tree (MST), \n        \n        // What is an MST?\n        //      - Recall that Trees are Acyclical, Connected, & Undirected graphs (well, technically they are directed from parent to child, but that's besides the point).\n        //      - MST is the smallest subset of edges from a graph that still connects all of its nodes but also forms a Tree (Acyclical, Connected, & Undirected Graph as discussed in the point above).\n        //          If the ages are weighted, then we minimize the total cost by taking a subset of the edges such that the cost is minimized.\n        //      - For some Trees (like binary trees) we usually ignore the fact that they're directed (only parent has pointers to its children), but here it is more strict than that. \n        //          Meaning the edges really will not have any direction.\n\n        // Since we want the MST, we can use the following algorithms:\n        //  * Prim's Algorithm: [for Undirected & Connected Graphs] \n        //          \n        //              \n        //  * Kruskal's Algorithm:\n        //          .\n\n        soln = new PrimsAlgo_1();\n\n        return soln.MinCostConnectPoints(points);\n    }\n\n}\n\n\npublic interface IMinCostToConnectPointsCalculator\n{\n    int MinCostConnectPoints(int[][] points);\n}\n\npublic class PrimsAlgo_1 : IMinCostToConnectPointsCalculator\n{\n    int Abs(int num) => (int) Math.Abs(num);\n    int Cost(int x1, int y1, int x2, int y2) => Abs(x1-x2) + Abs(y1-y2); //returns ManhattanCost\n\n    public int MinCostConnectPoints(int[][] points)\n    {\n\n    }\n}",
    "problemId": "min-cost-to-connect-points",
    "statusDescription": "Compilation Error",
    "time": "0.0",
    "date": "2024-11-28T22:49:36.381Z",
    "memory": "",
    "stdout": "",
    "stderr": ""
}